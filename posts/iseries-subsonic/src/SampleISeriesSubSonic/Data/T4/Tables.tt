<#@ template language="C#v3.5" debug="True" hostspecific="True" #>
<#@ output extension=".cs" #>
<#@ include file="Utilities.ttinclude" #>
/// <autogenerated>
/// This code was generated by a tool. Any changes made manually will be lost
/// the next time this code is regenerated.
/// </autogenerated>
using System;
using SubSonic.SqlGeneration.Schema;

namespace <#=entityNamespace#>
{
<# 
	List<TableInfo> tables=GetTables(library);
	foreach(TableInfo table in tables)
	{
 #>
	[SubSonicTableNameOverride("<#=table.Name#>")]
	public partial class <#= table.CodeFriendlyName #>
	{
		#region Fields
<#
		foreach(ColumnInfo column in table.Columns)
		{
		
		if (column.IsPrimaryKey)
#>		[SubSonicPrimaryKey]
<#
		if (column.IsNullable)
#>		[SubSonicNullString]
<#		
		if (column.Precision > 0) {
#>		[SubSonicNumericPrecision(<#=column.Precision#>,<#=column.Scale#>)]
<#		}
		
		if (!string.IsNullOrEmpty(column.DefaultValue))
		{
#>		[SubSonicDefaultSetting(<#=column.IsText ? string.Format("\"{0}\"", column.DefaultValue) : column.DefaultValue#>)]
<#
		}

		if (column.Name.ToLowerInvariant() != column.CodeFriendlyName.ToLowerInvariant())
		{
#>		[SubSonicColumnNameOverride("<#=column.Name#>")]
<#
		}
#>
		public <#= column.CSharpType #> <#= column.CodeFriendlyName #> { get; set; }
<#
		} 
#>
		#endregion
		
		public <#=table.CodeFriendlyName#>()
		{
		
			#region Init with table spec defaults
<#			foreach(var column in table.Columns)
			{
				if (!string.IsNullOrEmpty(column.DefaultValue))
				{
#>			<#=column.CodeFriendlyName#> = <#=column.IsText ? string.Format("\"{0}\"", column.DefaultValue) : column.DefaultValue#>;
<#				}
			}
#>			#endregion
		}
	}
<# } #>
}
